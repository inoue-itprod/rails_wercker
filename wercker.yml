box: ruby:2.5-slim

build:
  services:
    - id: mysql
      tag: 5.7
      env:
        MYSQL_ROOT_PASSWORD: secret
        MYSQL_USER: root

  steps:
    - script:
      name: install packages
      code: |
        apt-get update
        apt-get install -y build-essential curl default-libmysqlclient-dev
        curl -sL https://deb.nodesource.com/setup_8.x | bash -
        apt-get install -y nodejs
    - bundle-install
    - script:
      name: setup database
      code: |
        RAILS_ENV=test \
        DATABASE_HOSTNAME=$MYSQL_PORT_3306_TCP_ADDR \
        bin/rails db:create db:schema:load
    - script:
      name: linter
      code: |
        bundle exec rubocop -R
    - script:
      name: unit test
      code: |
        DATABASE_HOSTNAME=$MYSQL_PORT_3306_TCP_ADDR \
        rspec spec

push-to-ecr-test:
  steps:
    - internal/docker-push:
      aws-access-key: $AWS_ACCESS_KEY_ID
      aws-secret-key: $AWS_SECRET_ACCESS_KEY
      aws-region: $AWS_REGION
      aws-registry-id: $AWS_REGISTRY_ID
      repository: rails-wercker
      tag: test

push-to-ecr:
  steps:
    - script:
      name: prepare to push to ecr
      code: |
        export ECR_TAG=`echo $WERCKER_GIT_BRANCH | sed 's/[^[:alnum:]_.-]//g'`
    - script:
      name: move to rails dir
      code: |
        mkdir /app
        cp -r $WERCKER_SOURCE_DIR/* /app
    - script:
      name: install packages
      code: |
        apt-get update
        apt-get install -y build-essential curl default-libmysqlclient-dev
        curl -sL https://deb.nodesource.com/setup_8.x | bash -
        apt-get install -y nodejs
    - bundle-install:
      cwd: /app
    - script:
      name: assets precompile
      cwd: /app
      code: |
        bin/rake assets:precompile RAILS_ENV=production
    - internal/docker-push:
      aws-access-key: $AWS_ACCESS_KEY_ID
      aws-secret-key: $AWS_SECRET_ACCESS_KEY
      aws-region: $AWS_REGION
      aws-registry-id: $AWS_REGISTRY_ID
      repository: rails-wercker
      tag: $ECR_TAG
      cmd: rails server -e production
      working-dir: /app
      ports: 3000

deploy-to-ecs:
  box: python:2.7-slim
  steps:
    - script:
      name: prepare to deploy to ecs
      code: |
        export ECR_TAG=`echo $WERCKER_GIT_BRANCH | sed 's/[^[:alnum:]_.-]//g'`
    - script:
      name: move to deploy dir
      code: |
        mkdir /deploy
        cp $WERCKER_SOURCE_DIR/deploy/* /deploy
    - script:
      name: template
      cwd: /deploy
      code: |
        ./template.sh
        cat < /deploy/task-definition.json
    - 1science/aws-ecs:
      key: $AWS_ACCESS_KEY_ID
      secret: $AWS_SECRET_ACCESS_KEY
      region: $AWS_REGION
      cluster-name: rails-wercker-cluster
      service-name: rails-wercker-service
      task-definition-name: rails-wercker-web
      task-definition-file: /deploy/task-definition.json

feature-spec:
  steps:
    - script:
      name: install packages
      code: |
        apt-get update -qq
        apt-get install -y build-essential curl
        apt-get install -y unzip libnss3-tools
    - script:
      name: setup fonts
      code: |
        mkdir -p /usr/share/fonts/noto
        curl -o /tmp/NotoSansCJKjp-hinted.zip https://noto-website-2.storage.googleapis.com/pkgs/NotoSansCJKjp-hinted.zip
        unzip /tmp/NotoSansCJKjp-hinted.zip -d /usr/share/fonts/noto/
    - script:
      name: setup chrome
      code: |
        curl https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
        sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
        apt-get update && apt-get install -y google-chrome-stable
    - script:
      name: setup chromedriver
      code: |
        curl -o /tmp/chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/$(curl -fsSL https://chromedriver.storage.googleapis.com/LATEST_RELEASE)/chromedriver_linux64.zip
        unzip /tmp/chromedriver_linux64.zip -d /usr/local/bin
    - script:
      name: move to spec dir
      code: |
        mkdir /spec
        cp $WERCKER_SOURCE_DIR/feature_spec/environment/Gemfile /spec
        cp $WERCKER_SOURCE_DIR/feature_spec/environment/Gemfile.lock /spec
        cp -r $WERCKER_SOURCE_DIR/feature_spec /spec
    - bundle-install:
      cwd: /spec
    - script:
      name: feature test
      cwd: /spec
      code: |
        rspec feature_spec
